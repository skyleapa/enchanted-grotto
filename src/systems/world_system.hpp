#pragma once

// internal
#include "common.hpp"

// stlib
#include <vector>
#include <random>

#define SDL_MAIN_HANDLED
#include <SDL.h>
#include <SDL_mixer.h>

#include "render_system.hpp"
#include "biome_system.hpp"
#include "ui_system.hpp"
#include "respawn_system.hpp"

// Container for all our entities and game logic.
// Individual rendering / updates are deferred to the update() methods.
class WorldSystem
{
public:
	WorldSystem();

	// creates main window
	GLFWwindow* create_window();

	// call to close the window
	void close_window();

	// starts the game
	bool init(RenderSystem* renderer, BiomeSystem* biome_sys);

	// releases all associated resources
	~WorldSystem();

	// steps the game ahead by ms milliseconds
	bool step(float elapsed_ms);

	// check for collisions generated by the physics system
	void handle_collisions(float elapsed_ms);
	void handleEnemyInjured(Entity enemy_entity, float damage);

	// should the game be over ?
	bool is_over() const;

	void handle_player_interaction();

	bool handle_item_pickup(Entity player, Entity item);

	void update_textbox_visibility();

	bool handleGuardianUnlocking(Entity guardianEntity);

	void showTemporaryGuardianDialogue(Entity guardianEntity, const std::string& message);

	void updatePlayerState(Entity& player, Motion& player_motion, float elapsed_ms_since_last_update);

	// Set reference to UI system
	void setUISystem(UISystem* ui_system) { m_ui_system = ui_system; }

	bool throwAmmo(vec2 target);

	void updateThrownAmmo(float elapsed_ms_since_last_update);

	void updateFPS(float elapsed_ms);

	// Potion methods
	void updateConsumedPotions(float elapsed_ms_since_last_update);
	bool consumePotion();
	void addPotionEffect(Potion& potion, Entity player);
	void removePotionEffect(Potion& potion, Entity player);
private:

	float mouse_pos_x = 0.0f;
	float mouse_pos_y = 0.0f;

	// input callback functions
	void on_key(int key, int, int action, int mod);
	void on_mouse_move(vec2 pos);
	void on_mouse_button_pressed(int button, int action, int mods);
	void on_mouse_wheel(double xoffset, double yoffset);
	void on_window_resize(int w, int h);

	// restart level
	void restart_game(bool hard_reset);

	// OpenGL window handle
	GLFWwindow* window;

	// Game state
	RenderSystem* renderer;
	BiomeSystem* biome_sys;
	float current_speed;
	int winPosX;
	int winPosY;

	// grid
	std::vector<Entity> grid_lines;

	// user pressed keys
	std::unordered_set<int> pressed_keys;

	// C++ random number generator
	std::default_random_engine rng;
	std::uniform_real_distribution<float> uniform_dist; // number between 0..1

	// Pointer to the UI system for passing input events
	UISystem* m_ui_system = nullptr;

	// FPS counter variables
	float m_frame_times[60] = { 0 }; // Store last 60 frame times
	int m_frame_time_index = 0;
	float m_frame_time_sum = 0;
	float m_current_fps = 0;
	float m_fps_update_timer = 0;
	float m_last_fps = 0;
};
